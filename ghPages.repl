import com.micronautics.publish._
import java.nio.file.{Files, Path}
import java.io.File
import org.slf4j.Logger
implicit val config: Config = Config.default.copy(gitHubName=Some("mslinn"), gitRemoteOriginUrl=Some("git@github.com:mslinn/web3j-scala.git"), subProjectNames=List("root", "demo"))
val root: Path = Files.createTempDirectory("ghPages")
val repoDir = new File(root.toFile, "repo")
val ghPagesBranchName = "gh-pages"
implicit val commandLine: CommandLine = new CommandLine
implicit val logger: Logger = org.slf4j.LoggerFactory.getLogger("pub")
import commandLine.run
run(root, s"git clone --depth 1 ${ config.gitRemoteOriginUrl } $repoDir")
run(repoDir, "git", "checkout", "--orphan", ghPagesBranchName)
Nuke.removeUnder(repoDir)
// Is the right directory empty?
// Establish the branch existence
run(repoDir, s"""git commit --allow-empty -m "Initialize $ghPagesBranchName branch"""")
run(repoDir, s"git push origin $ghPagesBranchName")
Nuke.remove(repoDir.toPath)
