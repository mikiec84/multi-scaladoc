#!/bin/bash

# Edit these values to suit:
export SCALADOC_COPYRIGHT="Copyright 2017 Micronautics Research Corporation."
#export SCALADOC_DRYRUN="true"                 # comment this out for production
export SCALADOC_GITHUB_NAME="mslinn"           # replace this with your github user id
export SCALADOC_KEEP="true"                    # comment this out for production
#export SCALADOC_PRESERVE_INDEX="true"
export SCALADOC_GIT_URL="git@github.com:mslinn/web3j-scala.git"  # Edit this to point to the SBT project on GitHub that you want to document
export SCALADOC_SUB_PROJECT_NAMES="root,demo"  # Edit this to include the SBT project names that you want to generate Scaladoc for
# No need to modify anything below this line


function help {
  echo "This script generates Scaladoc for this project's subprojects.
SBT and git must be installed for this script to work, and the generated Scaladoc will look better if graphviz is installed.
To see the help information for this program, type:
    bin/run -h

The following environment variables can be used to provide configuration information to the program:
SCALADOC_COPYRIGHT, SCALADOC_DRYRUN, SCALADOC_GITHUB_NAME, SCALADOC_KEEP, SCALADOC_PRESERVE_INDEX, SCALADOC_GIT_URL, SCALADOC_SUB_PROJECT_NAMES

The following environment variables can be overridden by command-line parameters:
SCALADOC_DRYRUN, SCALADOC_KEEP, SCALADOC_PRESERVE_INDEX

To run this script in debug mode so a debugger can remotely attach to it, use the -d option:
    bin/run -d

To run this script from SBT, use the -S option:
    bin/run -S

When not running in debug mode, this script builds a fat jar, which takes longer the first time it runs, but speeds up subsequent invocations.
The -j option forces a rebuild of the jar:
    bin/run -j
"
  # Do not exit; let the program run so it can display it's help message
}

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/.."
cd "$DIR"


while getopts ":hdSj" opt; do
  case ${opt} in
    d) DEBUG="-J-Xdebug -J-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"
       RUN_SBT=true
       shift
       ;;
    h) help ;;
    j) BUILD_JAR=true
       shift
       ;;
    S) RUN_SBT=true
       shift
       ;;
  esac
done

ENTRY="com.micronautics.publish.Main"

# Scan build.sbt for program name, Scala version and program version
function findValue {
  echo "$( grep "$1 :=" build.sbt | cut -d' ' -f 3 | tr -d \" )"
}

function SCALA_VERSION {
  V=`grep "scalaVersion :=" build.sbt |  cut -d' ' -f 3 | tr -d \"`
   case $V in
    2.10.*) echo 2.10 ;;
    2.11.*) echo 2.11 ;;
    2.12.*) echo 2.12 ;;
    2.13.*) echo 2.13 ;;
     3.0.*)  echo 3.0 ;;
     3.1.*)  echo 3.1 ;;
         *) echo UNKNOWN ;;
  esac
}

function runFatJar {
  NAME="$( findValue name )"
  VERSION="$( findValue version )"
  JAR=target/scala-`SCALA_VERSION`/$NAME-assembly-$VERSION.jar
  
  if [ "$BUILD_JAR" ] || [ ! -f $JAR ]; then
    echo "Building $JAR"
    sbt assembly
  
    if [ "$1" == -j ]; then shift; fi
  fi

  java -cp "$JAR" "$ENTRY" \
    $DRY_RUN \
    $KEEP_AFTER \
    $PRESERVE_INDEX \
    "$@"
}

if [ "$RUN_SBT" ]; then
  sbt $DEBUG "runMain $ENTRY $DRY_RUN $KEEP_AFTER $PRESERVE_INDEX $*"
else
  runFatJar "$@"
fi
